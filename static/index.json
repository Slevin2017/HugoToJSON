[{"title":"Arran (and Joel) Play The Witcher 2: The Prologue","href":"/post/arran-and-joel-player-the-witcher-2-the-prologue","date":"2019-01-19T00:33:41Z","tags":["The Witcher 2","Game","PC"],"content":"Joel and I spent the Summer of second year playing The Witcher 1: Enhanced Edition, a game I've wanted to play since 2007. This year we've decided to pick up The Witcher 2: Assassin of Kings, the game [famously presented to Obama by Polish Prime Minister Donald Tusk](https://en.cdprojektred.com/news/the-witcher-2-presented-to-president-barack-obama/), and I intend to blog my thoughts and feelings about each chapter of the game. **WARNING: THIS SERIES WILL CONTAIN SPOILERS THROUGHOUT**\n<!--more-->\n\nLet's start at the very beginning, before Chapter 1 even begins.\n\n# The Intro Cinematic\n\n{{< picture name=\"Witcher 2 Opening Cinematic\" caption=\"The opening cinematic makes plenty use of the game's 18 rating\" >}}\n\nOne of the things clear from the get go with the Witcher 2 is that the quality bar has been moved up a notch. The first instalment of The Witcher could be summarised as 'Great ideas, poor execution.' and it's clear from the opening cinematic that CD Projekt RED have come leaps and bounds since then. The game's [opening cinematic](https://www.youtube.com/watch?v=YJ_KtvVvolY) is perhaps one of the finest in gaming. It tracks the game's villain, Letho as he assassinates ... a king. Combining equal doses of suspense and spectacle, the cinematic has near-infinite re-watchability and serves as a strong opening blow for the game.\n\n# The Prologue\n\nFollowing the opening cinematic, the prologue begins the real stage setting. The game opens with Geralt in chains and a new character Vernon Roche pressing him for questions. The prologue follows a 'story within a story' model and as you converse with Roche flashbacks unlock gameplay. It's intriguing and at times a tad disorienting but as the story unfolds it increasingly feels epic in proportions.\n\nYou start out being (re)introduced to the character of Triss, who lies naked in the bed beside you, and the concept of Geralt's memory loss. Then King Foltest summons you to assist him in his siege of La Valettes castle as his personal body guard, a siege fuelled by a lover's feud. Whilst Foltest in his previous incarnation appeared weak and at times dispassionately detached from the worries of Vizima, this sequence of gameplay portrays him as a father on the front-line of a battle desperately seeking to recapture his children from their mother. Whilst the combat is unchallenging, even in the sections without AI support, and the puzzle sections border on inane, the storytelling is rich and engaging enough to make the prologue stand out.\n\nOf particular note is the first meaningful choice of the game - how to deal with Aryan La Valette, a stoic noble fighting for his family's honour in the face of overwhelming odds. The right conversation options enable you to persuade him to lay down his arms and unlock a new path in the conclusion of the prologue. Figuring out the tactic to persuading him feels rewarding, and doubly so at the end of the prologue.\n\n{{< picture name=\"Trial By Fire\" caption=\"I'm sure we'll see this dragon again\" >}}\n\nThe remaining action of the prologue is driven by a dragon chase sequence, hinted at in early dialogue options, that accelerates the pace of the game and leads you directly to the cut-scene of Foltest being reunited with his children, and his assassination. A nasty twist that is telegraphed too heavily by the scenes with Roche, but is still rewarding enough due to the quality of the set piece. Here, the game relies heavily on the dialogue wheel both to drive the gameplay, a welcome change of pace from the early chore of combat, and to drive the narrative. The prison break that ensues whilst a predictable trope isn't entirely without depth for those who spared Aryan La Valette as he reappears and in a last act of honour blows up the prison during your escape.\n\nAs Geralt, Roche, and Triss escape on the boat the prologue ends and chapter one begins. It's a strong opening to the title and it acts as a highlight reel showing off all the compelling elements of The Witcher in a short and perfectly paced introduction. Whilst it would be easy to draw comparisons to the Witcher 1's Kaer Morhen prologue it's evident that the sequels take on the opening act is far stronger."},{"title":"Often Forgotten Star Wars: Imperial Assault Rules","href":"/post/often-forgotten-star-wars-imperial-assault-rules","date":"2017-01-11T16:11:52Z","tags":["Star Wars","Imperial Assault","Board Games"],"content":"Star Wars: Imperial Assault is a behemoth of a game and with epic scale comes the challenge of complexity. Fantasy Flight, to their credit, have done a decent job of making the game digestable with the tutorial mission and the two rules books: the Learn to Play guide and the Rules Reference booklet. Shut Up and Sit Down have a [fantastic getting started video](https://www.shutupandsitdown.com/videos/how-to-play-imperial-assaults-campaign/) to bring new players up to speed as well.\n\nStill, despite the quality of resources it's easy to forget the odd rule here or there and so as an exercise I figured I'd do a deep dive into the manuals and collect up some of the rules that tend to be forgotten or mis-interpreted.\n\n## Strain and Endurance\n\n* Any additional strains taken past a hero's endurance by a game effect add's an additional point of damage.\n* A hero may suffer a strain to gain an additional movement point, up to two times per activation.\n* Whilst attacking a hero may spend a single surge to recover one strain\n\n## Attacking\n\n* Conditions such as Bleed require at least one damage to be dealt for them to take effect.\n* Each ability that costs a surge to use can only be used once per attack.\n* Non-hero figures, such as Darth Vader, may not perform an attack and then a special ability that allows them to attack.\n* Objects can be affected by Blast and Cleave\n\n## Terrain\n\n* Spaces separated by impassable terrain (dashed red) *are* adjacent and line of sight can be traced through it.\n* Difficult terrain can be entered for one additional movement point.\n\n## Credits\n\n* Items can be sold back to the shop for half of their face value.\n* Starting items can be sold back to the shop for 50\n\n## Threat\n\n* The threat level is *not* the current amount of threat the Imperial player has, it's the amount of threat that the player gains each turn\n* Threat cannot exceed 20 or decrease below 1\n\n## Mission Setup\n\n* The Imperial player may add a number of additional deployment cards equal to the number listed under groups in the mission setup that are either Imperial or Mercenary. Unique units prefixed with a black square cannot be added unless the Imperial Player has earned them as a mission reward.\n* Reinforcements and deployments can only be deployed to active deployment points. These are the green marked points on the mission map.\n\n## Post-Mission\n\n* Agenda cards should be shown to the Rebels on purchase unless the card specifically says it should be kept secret.\n* Side Mission Agenda cards should be immediately presented the to rebels as as side mission option.\n* Forced Mission Agenda cards should be immediately played.\n\n## Characters\n\n* Heroes may have an unlimited amount of items but may only bring one armour item, two weapon cards, and three equipment to a mission.\n* Any items except reward cards made be traded between missions.\n\n## Allies\n\n* Rebel players may deploy a single ally they have earned as a reward immediately after the Rebels have deployed their hero figures.\n* If the rebels player deploy an ally the Imperial player gains threat equal to the ally's deployment cost and may immediately resolve an aditional depoyment.\n* Allies are not heroes and cannot ineract with crates or rest, and may only perform one attack action per activation\n* Allies that are part of a mission do not give additional threat or an additional deployment to the Imperial player\n\n## Attribute Tests\n\n* If an attribute test requires multiple surges to roll. If an attempt is unsuccesful, add the number of successes as surge tokens to the object. The next attempt then gains the number surge tokens as successes, and then discards them.\n* Only heroes can perform attribute tests. Elite figures automatically have success one. Regular figures fail attribute tests.\n\n## Large Units\n\n* Units only have to pay 1 additional movement point to enter the large unit and are not required to spend an additional movement point per space of the unit they move through."},{"title":"My Experience Hosting a Lord of the Rings Marathon","href":"/post/my-experience-hosting-a-lord-of-the-rings-marathon","date":"2019-02-04T23:09:46Z","tags":["Lord of the Rings"],"content":"A couple of weekends ago I hosted a few friends for a Lord of the Rings marathon and we set off on an epic adventure in Middle Earth together. Here's my take on what went well, what I'd change, and which movie I never intend to watch the extended edition of again.\n\n<!--more-->\n\nMy first recommendation from the weekend is to have a running order that tracks your breaks, meals, and viewing times throughout the day. My wife and I found this [excellent Quora post](https://www.quora.com/What-is-the-combined-length-of-the-Lord-of-the-Rings-Extended-Editions) that lists the runtime for each movie (extended editions of course) which we used to form the basis for our crib sheet. We decided that it was best to start late and run late (10am-10:30pm) as opposed to requesting our guests arrive at 7am! Whilst we leaned heavily on the running order to ensure we'd finish in good time we didn't stick to it strictly. People are human and listening to your crowd's needs is important!\n\nMy second recommendation is to _not_ watch the Two Towers in its extended form. It adds an extra 40 minutes of footage to what is probably the weakest of the three movies. The Two Towers is already light on action and heavy on background and my group of friends struggled through the extended tree contents. Whilst there are some gems in the extended version, such as The Funeral of Theodred and Sons of the Steward [^1], it's difficult to justify the extra time spent waiting for Return of the King.\n\nA small touch that helped me enjoy the marathon was choosing to watch a remastered version of the Fellowship of the Ring. The bluray extended editions of The Fellowship of the Ring are infamous for their green tint up to the Mines of Moria. Many classic shots are ruined by green snow, off-colour skies, and darkened faces. Fortunately, 44rh1n from the Original Trilogy forum has produced a [restored version of the movie](https://originaltrilogy.com/topic/44rh1ns-The-Fellowship-of-the-Ring-Extended-Edition-Color-Restoration/id/61952) by using scenes from the non-extended Bluray and using chroma from the extended DVD edition. If you're not convinced it's worth getting [^2], take a look at the comparison image below.\n\n<a href=\"https://files.arranfrance.com/images/2019/Feb/fellowship-of-the-rings-extended-comparison_txcqzf_c_scale,w_1381.jpg\">{{<picture name=\"Fellowship of the Ring 44rh1n's Restoration Comparison\" caption=\"A comparison between 44rh1n's Restoration, the Extended Edition bluray, and the original bluray\" >}}</a>\n\nWhilst the day itself went off without a hitch there are a few things I would do differently next time. Firstly, I would turn the heating low. We were fortunate enough to have broken heating but if it had been on or it had been the middle of summer, we would've been frustratingly warm by the final movie. Secondly, I would've planned for some physical activity! By the time the second movie was over people were itching to go outside and do something different. A scheduled walk would've scratched that itch nicely. Finally, I would've planned how to play 44rh1n's restored Fellowship of the Ring in advance. An hour before we were due to start I was playing with a Raspberry Pi trying to network it to Windows 10, a setup doomed to fail. In the end I streamed it from my PC to my Chromecast Ultra using VLC player. It worked flawlessly after I stopped my computer from sleeping [^3].\n\n[^1]: The One Wiki to Rule Them All has [an excellent article on the extended editions and their contents](https://lotr.fandom.com/wiki/The_Lord_of_the_Rings_Extended_Edition)\n[^2]:To get a copy you will either have to be part of an exclusive BitTorrent community or convince 44rh1n that you're not a pirate\n[^3]: The moment it stopped streaming was extremely embarrassing and could've easily been alleviated with a little forethought."},{"title":"Responsive Blog Images","href":"/post/responsive-blog-images","date":"2019-01-20T23:11:28Z","tags":["Hugo","Images","Responsive","Blog"],"content":"The state of images on the web is pretty rough. What should be an easy goal, showing a user a picture, is actually complicated. Good websites deliver the right resolution to the right device, perform lazy loading, support 'retina' (or high density pixel) devices, serve new image formats like WebP to the correct clients, and show placeholders whilst images load. It's messy, hard to get right, and requires a lot more effort than a user might realise behind the scenes. Here's a blow by blow account of how I attempt to incorporate those techniques into this blog.\n\nLet's start with my goals:\n\n1. Devices should download an appropriate image for their resolution, including supporting high pixel density or 'retina' images\n2. Images should look good regardless of the device size\n3. Images should be lazy loaded\n4. A placeholder should be displayed whilst images load\n5. Images should work well with or without JavaScript enabled\n6. I shouldn't need to store an unnecessary amount of images under source control\n7. I shouldn't have to write raw HTML to make anything work\n\nLet's look at these goals in chronological order and see how I get to my solution.\n\n# Goal: Devices Should Download an Appropriate Image for Their Resolution\n\nWhilst your high resolution screen might need the highest fidelity image I can offer chances are that readers on their phone can cope with a much smaller image both in terms of file size and dimensions; small screens just don't need as many pixels per image. Serving a smaller image where possible saves battery life, saves the reader's bandwidth, and leads to a quicker page load. \n\nThe first question to ask is 'How do I know what size image my reader needs?'. The answer is - it's difficult to know. The best solution is to provide hints to the browser and let it choose. By using the HTML5 [srcset and sizes attributes](https://www.smashingmagazine.com/2014/05/responsive-images-done-right-guide-picture-srcset/) we specify the options available and the size the image should be displayed at in the browser. Whilst most modern browsers support these attributes `img`'s that don't will gracefully fall back to the `src` attribute. \n\n``` html\n<img \n    sizes=\"(max-width: 1400px) 100vw, 1400px\"\n    srcset=\"castle_c_scale,w_200.jpg 200w, castle_c_scale,w_364.jpg 364w, castle_c_scale,w_1400.jpg 1400w\"\n    src=\"castle_c_scale,w_1400.jpg\"\n    alt=\"A fancy castle\"\n>\n```\n\nThis technique, also supports high density (or 'retina') displays. If the browser does understand the `sizes` and `srcset` syntax then it can combine that information with the device's pixel ratio to request high density images (if available). So far, so good. All we need to do to make this work is produce a variety of images with appropriate dimensions and sizes - the browser will do the rest!\n\n# Goal: Images Should Look Good Regardless of the Device Size\n\nServing appropriately sized images to smaller devices is one half of the battle but sometimes an image's content won't translate across devices. Whilst a wide image may look good on a desktop device it's unlikely that the same image will look *as* good on a portrait mobile device. It's possible that the width of the image will constrain the narrowness of the device's screen to the point that scaling causes the detail of the image to be lost. What we need in this situation is _art direction_. That is, we want to serve a different versions of an image to different sized devices to ensure that the image retains its fidelity.\n\n<figure>\n<img src=\"//css-tricks.com/wp-content/uploads/2012/05/difimages.jpg\" alt=\"An example of art direction on mobile, tablet, and desktop\">\n<figcaption>On the left, the mobile image and default <code>src</code>. In the middle, a slightly larger image that could be used on tablets. On the right, the largest of the images suitable for desktops. <a href=\"https://css-tricks.com/which-responsive-images-solution-should-you-use/\">Credit</a></figcaption>\n</figure>\n\nWhilst generating different size images is easy enough to automate, smartly generating different variants of an image at different aspect ratios is much harder. Fortunately Cloudinary has [an open source tool (responsivebreakpoints.com)](https://www.responsivebreakpoints.com/) that takes a single image and produces images of varying quality at chosen aspect ratios per device size, for instance 1:1 images for mobile, 3:2 for tablet, 16:9 for small laptops, and original ratio for desktops. These images are then handily bundled up in a single .zip file and it provides HTML `<picture>` markup for the images it generates.\n\n# Goal: I Shouldn't Need to Store an Unnecessary Amount of Images Under Source Control\n\nSo now we have some HTML and a zip file of images. Historically I would've copied the images into the `/static/images/{YEAR}/{MONTH}` directory of my blog's repository but [git isn't suited to storing a large amount of large binary files](https://robinwinslow.uk/2013/06/11/dont-ever-commit-binary-files-to-git/) - whilst it made sense when I was only storing one version of each image it doesn't scale to the kind of volume produced by responsivebreakpoints.com. I've opted to store my images in an Amazon S3 Bucket. S3's perfect for this kind of thing as it handles things like reliability and transfer speed for me. All I need to worry about is making sure that images end up in the right place and it handles the rest. I opted to make my URLs prettier than the default given by AWS, which are truly ugly[^3], by using a CloudFront distribution to put the files under my own domain. Images are predictably hosted at `files.arranfrance.com/images/{YEAR}/{MONTH}/{SUBJECT}/`!\n\n# Goal: I Shouldn't Have to Write Raw HTML to Make Anything Work\n\nNow we theoretically have a variety of appropriately sized art-directed images stored in S3 at a predictable URL and some HTML given to us by [responsivebreakpoints.com](https://www.responsivebreakpoints.com/). We have a couple of problems though - the HTML we have looks like this:\n\n```html\n<!--Some srcsets removed for the sake of brevity-->\n<picture>\n<source\nmedia=\"(max-width: 767px)\"\nsizes=\"(max-width: 1366px) 100vw, 1366px\"\nsrcset=\"\ncastle_ar_1_1,c_fill,g_auto__c_scale,w_200.jpg 200w,\ncastle_ar_1_1,c_fill,g_auto__c_scale,w_333.jpg 333w,\n...,\ncastle_ar_1_1,c_fill,g_auto__c_scale,w_1366.jpg 1366w\">\n<source\nmedia=\"(min-width: 768px) and (max-width: 991px)\"\nsizes=\"(max-width: 1983px) 70vw, 1388px\"\nsrcset=\"\n...,\ncastle_ar_4_3,c_fill,g_auto__c_scale,w_1388.jpg 1388w\">\n<source\nmedia=\"(min-width: 992px) and (max-width: 1199px)\"\nsizes=\"(max-width: 2400px) 60vw, 1440px\"\nsrcset=\"\n...,\ncastle_ar_16_9,c_fill,g_auto__c_scale,w_1440.jpg 1440w\">\n<img\nsizes=\"(max-width: 5120px) 40vw, 2048px\"\nsrcset=\"\n...,\ncastle_c_scale,w_2048.jpg 2048w\"\nsrc=\"castle_c_scale,w_2048.jpg\"\nalt=\"\">\n</picture>\n```\n\nYou may notice a few issues at first glance.\n\n1. It's missing alt attributes\n2. There are no captions\n3. The images aren't sourced correctly - they are located them to be located in the same place as the HTML as opposed to stored on a different domain\n4. If I ever adjust the template for these images (for example, by adding some styling) I have to change HTML across many different blog posts\n\nAdditionally, the HTML is large enough to become a distraction whilst writing and lot of the structure of the markup is boilerplate, this feels like a problem my static site generator, Hugo, should be able to solve.\n\n## Hugo Shortcodes: An Initial Attempt\n\nHugo was thinking along the same lines as us when it comes to the problem of our unwieldy HTML and came up with a solution - shortcodes.\n\n> Hugo loves Markdown because of its simple content format, but there are \n> times when Markdown falls short. Often, content authors are forced to \n> add raw HTML (e.g., video `<iframes>`) to Markdown content. We think this contradicts the beautiful simplicity of Markdown’s syntax.\n\nBy writing a Hugo shortcode, we can turn the ugly HTML into a simple snippet we can reuse. Now we have a strategy - we just need to implement it. We can start by figuring out what the repeatable elements of the HTML are.\n\nEach image starts with a `<picture>` tag and then has many `<source>` tags which each have a `media`, `sizes`, and `srcset` attribute. There's also a final `<img>` tag to allow browsers that don't support `<picture>` to fallback. We also want to optionally include a caption for images. An initial semi-pseudo-shortcode solution could look like this.\n\n```handlebars\n{{ picture caption=\"Example Caption\" }}\n{{ responsiveimage media=\"...\" sizes=\"...\" srcset=\"..\" }}\n...\n{{ fallbackimage sizes=\"...\" srcset=\"...\" media=\"...\" }}\n{{ endpicture }}\n```\n\nIn this example we wrap everything in a picture shortcode which allows us to fence content inside it. If the caption is provided we make the picture a `<figure>` with a `<figcaption>` otherwise it is just a regular `picture` element.\n\n```html\n{{ if .Get \"caption\"}}\n<figure>\n{{ end }}\n<picture>\n    {{ .Inner }}\n</picture>\n{{ if .Get \"caption\"}}\n    <figcaption>{{ .Get \"caption\" }}</figcaption>\n</figure>\n{{ end }}\n```\n\nThe responsive image shortcode is fairly straightforward. \n\n```\n<source media=\"{{ .Get \"media\" }}\" sizes=\"{{ .Get \"sizes\" }}\" srcset=\"{{ .Get \"srcset\" }}\">\n```\n\nAs is the fallback image.\n\n```\n<img sizes=\"{{ .Get \"sizes\" }}\" srcset=\"{{ .Get \"srcset\" }}\" src=\"{{ .Get \"src\" }}\"    alt=\"{{ .Get \"caption\" }}\">\n```\n\nThe problem is that whilst the shortcodes are reusable - they aren't much shorter, and we still don't have a solution for transforming our HTML into one.\n\n## Writing a Generator: A First Pass\n\nTurning HTML into something else in a repeatable way sounds like the job for a program! For the initial proof of concept I wrote a basic ~30 line JavaScript program that takes a string, parses it using [cheerio](https://github.com/cheeriojs/cheerio), transforms it, and logs it to console[^1].\n\n```javascript\nvar cheerio = require('cheerio'),\n\n// TODO: Get this from the command line\n$ = cheerio.load(`<picture ... >`);\n\n// TODO: This should be dynamic\nconst prefix = 'https://files.arranfrance.com/images/2019/Jan/Witcher2/Prologue/'\n\nfunction prefixSource(srcset) {\n    return srcset\n        .split(\"w,\")\n        .map(i => prefix + i.trim())\n        .reduce((s, v, i) => s + (i > 0 ? 'w,' : '') + v, '');\n}\n\nconst sources = [];\n$('source').each((i, elem) => {\n    const source = $(elem);\n    const media = source.attr('media');\n    const sizes = source.attr('sizes');\n    const srcset = prefixSource(source.attr('srcset'))\n    sources.push({media, sizes, srcset});\n});\n\nconst img = $('img');\nconst sizes = img.attr('sizes');\nconst srcset = prefixSource(img.attr('srcset'));\nconst src = 'https://files.arranfrance.com/images/' + img.attr('src');\n\nlet s = '{{</* picture caption=\"\" */>}} \\n';\nsources.forEach(source => {\n    s+= `{{</* responsiveimage media=\"${source.media}\" sizes=\"${source.sizes}\" srcset=\"${source.srcset}\" */>}} \\n`\n});\ns+= `{{</* fallbackimage sizes=\"${sizes}\" srcset=\"${srcset}\" src=\"${src}\" */>}} \\n`;\ns+= '{{</* /picture */>}}';\n\nconsole.log(s);\n```\n\nIt's primitive - but it works as a proof of concept. Now we can easily translate responsivebreakpoints.com HTML output into our Hugo shortcodes and make the image sources point to our S3 files instead.\n\n# Goal: Images Should be Lazy Loaded\n\nSo far we've solved the problem of serving the correct image to each device, storing the images outside of source control, and the need to have HTML in our markdown files (although our shortcode falls short of completely eliminating boilerplate). The next step is figuring out how to lazy load our images. Lazy loading is the process of only loading images when necessary as opposed to on page loading. It's achieved by observing the users viewport (and items about to enter the viewport) and then causing them to be fetched using JavaScript. The easiest way to achieve this is the fantastic [lazysizes](https://github.com/aFarkas/lazysizes) library. All we need to do is to replace the `src` or `srcset` attribute with a data attribute (`data-srcset` for example) and use the class `lazyload`.  The `lazyload` class allows lazysizes to find images that need to be loaded when they scroll into view using a combination of mutation observers and interaction observers. \n\nAll we need to do to make this work is add `import lazysizes from \"lazysizes\";` to our JavaScript and adjust our `responsiveimage` and `fallbackimage` shortcodes to look like this.\n\n```html\n<source\n    media=\"{{ .Get \"media\" }}\"\n    sizes=\"{{ .Get \"sizes\" }}\"\n    data-srcset=\"{{ .Get \"srcset\" }}\">\n```\n\n```html\n<img \n    data-proofer-ignore\n    class=\"lazyload\"\n    sizes=\"{{ .Get \"sizes\" }}\"\n    data-srcset=\"{{ .Get \"srcset\" }}\"\n    data-src=\"{{ .Get \"src\" }}\"\n    alt=\"{{ .Get \"caption\" }}\">\n```\n\nI've also added a `data-proofer-ignore` tag to prevent getting [htmltest](https://github.com/wjdp/htmltest) warnings about missing `src` tags on images.\n\n# Goal: Images Should Work Without JavaScript\n\nNow we're lazyloading our images we have a new problem, if somebody has their JavaScript disabled they won't see any images! Our only solution to fallback to if a user isn't using JavaScript is the `<noscript>` tag which only renders its contents if JavaScript is disabled. Firstly we define a style tag in our theme. This hides all lazyloading images and anything with the class `no-js-hidden`, which will come in handy later, if JavaScript is disabled. \n\n```html\n<noscript>\n  <style>\n    .no-js-hidden {\n      display: none;\n    }\n\n    .lazyload {\n      display: none;\n    }\n  </style>\n</noscript>\n```\n\nThen we can double up all our images so we have two variants - ones that will not appear unless scripting is disabled which use lazyloading `<noscript><source srcset=\"\" ...></noscript>` and ones that will be hidden if JavaScript _is_ disabled and that do use lazyloading `<picture class=\"no-js-hidden\"><source data-srcset=\"\" ...></picture>`.\n\n## Shortcode Changes\n\nUnfortunately, producing a noscript and regular version of a source in each individual shortcode breaks the `picture` tag causing it to render both the `img` and the `source`. Not ideal! Instead the solution is to have HTML that looks like the following:\n\n```html\n<picture class=\"no-js-hidden\">\n\t<source>\n\t<img>\n</picture>\n<noscript>\n\t<picture>\n\t\t<source>\n\t\t<img>\n\t</picture>\n</noscript>\n```\n\nThis means we need to rethink our shortcode philosophy and that's not a bad thing. Our existing solution is ugly and feels more like abuse than use of the shortcode system - mainly because we're trying to pass too much information in. It'd be great if we could store that information elsewhere. Hugo has a solution for that - [data templates](https://gohugo.io/templates/data-templates/)! They allow us to store structured data outside of our posts[^2] but in a way that is accessible from a shortcode.\n\nThis allows us to simplify our shortcode to something like `{{</* picture name=\"Trial By Fire\" caption=\"I'm sure we'll see this dragon again\" */>}}` because all the details can be stored elsewhere. To make this work our shortcode needs to become more complicated under the hood - but we'll only need one.\n\n```html\n{{ $caption := .Get \"caption\" }}\n{{ range first 1 (where $.Site.Data.images \"name\" (.Get \"name\")) }}\n  {{ if $caption }}\n    <figure>\n  {{ end }}\n  <picture class=\"no-js-hidden\">\n    {{ range .sources}}\n      <source\n        class=\"no-js-hidden\"\n        media=\"{{ .media }}\"\n        sizes=\"{{ .sizes }}\"\n        data-srcset=\"{{ .srcset }}\"\n      >\n    {{ end }}\n    <img \n      data-proofer-ignore\n      class=\"lazyload\"\n      sizes=\"{{ .fallback.sizes }}\"\n      data-srcset=\"{{ .fallback.srcset }}\"\n      alt=\"{{ $caption }}\"\n    >\n  </picture>\n  <noscript>\n    <picture>\n      {{ range .sources}}\n        <source\n          media=\"{{ .media }}\"\n          sizes=\"{{ .sizes }}\"\n          srcset=\"{{ .srcset }}\"\n        >\n      {{ end }}\n      <img\n        src=\"{{.fallback.src}}\"\n        sizes=\"{{ .fallback.sizes }}\"\n        srcset=\"{{ .fallback.srcset }}\"\n        alt=\"{{ $caption }}\"\n      >\n    </picture>\n  </noscript>\n  {{ if $caption }}\n      <figcaption>{{ $caption }}</figcaption>\n  </figure>\n  {{ end }}\n{{ end }}\n```\n\nIf you notice carefully you'll see that the real magic happens on line 2,  `{{ range first 1 (where $.Site.Data.images \"name\" (.Get \"name\")) }}` this allows us to grab a single image data where the name in the data file matches the name passed into the shortcode. After that things look very similar, except we're taking advantage of data structures that allow looping.\n\n## Writing a Generator: A Second Attempt\n\nAny change to our markup means we need to change the program that builds it. In fact, in this instance we want to change our program from building a shortcode string to producing the structured data that Hugo uses _in_ our shortcode. Despite the changed goal - the program looks very similar.\n\n```javascript\n#!/usr/bin/env node\n\nconst fs = require('fs');\nconst program = require('commander');\nconst cheerio = require('cheerio');\n\nfunction getHtml(program) {\n    const input = fs.readFileSync(program.input);\n    return cheerio.load(input);\n}\n\nfunction prefixSource(srcset) {\n    return srcset\n        .split(\"w,\")\n        .map(i => prefix + i.trim())\n        .reduce((s, v, i) => s + (i > 0 ? 'w,' : '') + v, '');\n}\n\nfunction getFallbackImageData($) {\n    const img = $('img');\n    const sizes = img.attr('sizes');\n    const srcset = prefixSource(img.attr('srcset'));\n    const src = 'https://files.arranfrance.com/images/' + prefixSource(img.attr('src'));\n    \n    return {sizes, srcset, src};\n}\n\nfunction getPrefix(program) {\n    const directory = program.directory ? program.directory[program.directory.length - 1] === '/' ? program.directory : program.directory + '/' : '';\n    const year = new Date().getFullYear();\n    const month = monthNames[new Date().getMonth()];\n    return `https://files.arranfrance.com/images/${year}/${month}/${directory}`;\n}\n\nprogram\n  .version('0.0.2')\n  .option('-n, --name <required>', 'The image name')\n  .option('-i, --input <required>','The input file')\n  .option('-l, --location [optional]','The location of the data file. Defaults to ./data/images.json')\n  .option('-d, --directory [optional]','The directory suffix that S3 files are located in')\n  .parse(process.argv);\n\nconst $ = getHtml(program);\n\nconst monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n  \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n];\n\nconst prefix = getPrefix(program);\nconst fallbackImage = getFallbackImageData($);\n\nconst sources = [];\n$('source').each((i, elem) => {\n    const source = $(elem);\n    const media = source.attr('media');\n    const sizes = source.attr('sizes');\n    const srcset = prefixSource(source.attr('srcset'));\n    const split = srcset.split('/')\n    const filename = split[split.length - 1].split(' ')[0];\n    sources.push({media, sizes, srcset});\n});\n\nconst data = {\n    name: program.name,\n    fallback: fallbackImage, \n    sources: sources\n};\n\nconst outputLocation = program.location ? program.location : './data/images.json'\n\nconst images = JSON.parse(fs.readFileSync(outputLocation));\nconst existingData = images.find(a => a.name === data.name);\nif (existingData) {\n    existingData = data;\n} else {\n    images.push(data);\n}\nfs.writeFileSync(outputLocation, JSON.stringify(existingData));\n```\n\nThis script looks a little more grown up than our previous one. Instead of copying and pasting values we're taking command line arguments using [commander](https://www.npmjs.com/package/commander) and reading/writing to files. The important difference is that instead of building a shortcode string we're building a JSON data structure.\n\n## Goal: A Placeholder Should be Displayed Whilst Images Load\n\nWhen lazyloading images it's nice to be able to display a placeholder image for users. There's been a [lot](https://calendar.perfplanet.com/2017/sqip-vague-vectors-for-performant-previews/) [written](https://jmperezperez.com/medium-image-progressive-loading-placeholder/) [about](https://css-tricks.com/the-complete-guide-to-lazy-loading-images/) this technique elsewhere after it was popularised by Facebook and Medium so I won't recap in much detail. The goal is to let the user know something is loading and to avoid the user seeing a shift in content as the image is loaded. The trade-off is the need to load in a placeholder as well as the image, but most placeholders are in the order of 800-1000 bytes, small enough to be irrelevant. {{< abbreviation word=\"SQIP\" definition=\"SVG-Based Image Placeholder, a derivation on LQIP or Low Quality Image Placeholder\" >}} is a technique that uses SVGs as a placeholder. The SVG is made to be a geometric approximation of the image which is then heavily blurred, passed through SVGO, and then encoded in base 64 so it can be inlined as a placeholder. The technique is backed by a [robust JavaScript library](https://github.com/technopagan/sqip) to produce the SVGs which makes implementing the technique a breeze.\n\nThe first step to implementing the technique is to generate a placeholder for each image variant. I've opted here to only show the relevant change, [the final program in its entirety is available on Github](https://github.com/arranf/ResponsiveImagetoShortcode).\n\n```javascript\nconst sqip = require('sqip');\n// <snip>\n$('source').each((i, elem) => {\n  const placeholder = sqip({\n        filename,\n        numberOfPrimitives: 10\n  });\n  sources.push({media, sizes, srcset, placeholder: placeholder.svg_base64encoded});\n}\n```\n\nThen we can adjust our shortcode to use the new placeholder property of our JSON.\n\n```html\n{{ $caption := .Get \"caption\" }}\n{{ range first 1 (where $.Site.Data.images \"name\" (.Get \"name\")) }}\n  {{ if $caption }}\n    <figure>\n  {{ end }}\n  <picture class=\"no-js-hidden\">\n    {{ range .sources}}\n      <source\n        class=\"no-js-hidden\"\n        media=\"{{ .media }}\"\n        sizes=\"{{ .sizes }}\"\n        {{ with .placeholder }} srcset=\"data:image/svg+xml;base64,{{.}}\" {{ end }}\n        data-srcset=\"{{ .srcset }}\"\n      >\n    {{ end }}\n    <img \n      data-proofer-ignore\n      class=\"lazyload\"\n      sizes=\"{{ .fallback.sizes }}\"\n      data-srcset=\"{{ .fallback.srcset }}\"\n      src=\"data:image/svg+xml;base64,{{ .fallback.placeholder }}\"\n      alt=\"{{ $caption }}\"\n    >\n  </picture>\n  <noscript>\n    <picture>\n      {{ range .sources}}\n        <source\n          media=\"{{ .media }}\"\n          sizes=\"{{ .sizes }}\"\n          {{ with .placeholder }} style=\"background-size: cover; background-image: url(data:image/svg+xml;base64,{{.}})\" {{ end }}\n          srcset=\"{{ .srcset }}\"\n        >\n      {{ end }}\n      <img\n        src=\"{{.fallback.src}}\"\n        sizes=\"{{ .fallback.sizes }}\"\n        srcset=\"{{ .fallback.srcset }}\"\n        style=\"background-size: cover; background-image: url(data:image/svg+xml;base64,{{ .fallback.placeholder }})\"\n        alt=\"{{ $caption }}\"\n      >\n    </picture>\n  </noscript>\n  {{ if $caption }}\n      <figcaption>{{ $caption }}</figcaption>\n  </figure>\n  {{ end }}\n{{ end }}\n```\n\nWhen JavaScript is *enabled* the placeholder is used as a `src` that is eventually replaced by the `data-src` when lazy loading occurs. When JavaScript is *disabled*, the placeholder is used as a background image whilst the actual image loads in.\n\n# Future Goals\n\nWhilst I've automated some of the steps for using an image in this blog there are many smaller steps that are unscripted.\n\nThe first step of compressing an image is performed manually by uploading an image to [TinyPNG](https://tinypng.com). I also manually upload images to responsivebreakpoints.com, upload image variants to AWS S3, and manually shuffle files around my local file system. All of these steps could be scripted! For now though, the process is good enough.\n\n\n[^1]: It turns out that the shortcodes in this program were not handled well by Hugo when building! You need to escape them (`{{</*/* myshortcode */*/>}} `) if you want to have them render correctly.\n[^2]: This is not ideal. It'd be much nicer to be able to define the data file alongside the post.\n[^3]: `https://s3.eu-west-2.amazonaws.com/arranfrance.com/images/2019/Jan/Witcher2/Prologue/Tw2_screenshot_Trial-by-fire_mlcldq_ar_16_9%2Cc_fill%2Cg_auto__c_scale%2Cw_1015.png` is about as ugly as URLs get."}]